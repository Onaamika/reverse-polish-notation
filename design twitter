class Tweet():
    def __init__(self, idx, time):
        self.idx = idx
        self.time = time

    def __lt__(self, other):
        return self.time < other.time

    def getId(self) -> int:
        return self.idx

class Twitter:
    def __init__(self):
        self.__feedLimit = 10
        self.uuid = itertools.count()                                     
        self.subscribers = defaultdict(set)                               
        self.subscriptions = defaultdict(set)                             
        self.feed = defaultdict(lambda: deque(maxlen = self.__feedLimit)) 
        self.posts = defaultdict(deque)                                   

    def postTweet(self, userId: int, tweetId: int) -> None:
        tweet = Tweet(tweetId, next(self.uuid))
        self.posts[userId].appendleft(tweet)
        for idx in chain([userId], self.subscribers[userId]):   
            self.__addToFeed(idx, tweet)

    def getNewsFeed(self, userId: int) -> List[int]:
        return list(map(Tweet.getId, self.feed[userId]))

    def follow(self, followerId: int, followeeId: int) -> None:
        if followerId in self.subscribers[followeeId]: return
        self.subscribers[followeeId].add(followerId)
        self.subscriptions[followerId].add(followeeId)
        self.__addUserToFeed(followerId, followeeId)
        
    def unfollow(self, followerId: int, followeeId: int) -> None:
        if followerId not in self.subscribers[followeeId]: return
        self.subscribers[followeeId].discard(followerId)
        self.subscriptions[followerId].discard(followeeId)
        self.__updateUserFeed(followerId)

    def __addToFeed(self, userId: int, tweet: Tweet, toStart = True) -> None:
        if toStart:
            self.feed[userId].appendleft(tweet)
        else:
            self.feed[userId].append(tweet)
    
    def __clearFeed(self, userId: int) -> None:
        self.feed[userId].clear()

    def __addUserToFeed(self, userId, addUserId):
        feed = sorted(list(self.feed[userId]) + list(self.posts[addUserId]), reverse = True)[:self.__feedLimit]
        self.__clearFeed(userId)
        for tweet in feed:
            self.__addToFeed(userId, tweet, False)
        

    def __updateUserFeed(self, userId) -> None:
        self.__clearFeed(userId)
        tweets = heapq.merge(*(self.posts[idx] for idx in self.subscriptions[userId] | {userId}), reverse = True)
        limitTweets = islice(tweets, self.__feedLimit)

        for tweet in limitTweets:
            self.__addToFeed(userId, tweet, False)
